¬°Claro! Te explico paso a paso y en detalle qu√© hace el c√≥digo de la **Parte 1** del TP, para que puedas explic√°rselo con seguridad a tu compa√±ero/a y a la profe.

---

## üß† ¬øQu√© es lo que hace este c√≥digo?

Simula **un nodo P2P** (peer to peer) que se conecta a una red LAN, elige un ID √∫nico, abre un servidor TCP para recibir conexiones de otros nodos, y te da una l√≠nea de comandos simple (CLI) para interactuar con √©l.

---

## üìå Componentes y qu√© hace cada parte:

### 1. `main.c` ‚Äî El programa principal

Este archivo:

* Lee los argumentos: el ID que quer√©s tener y el puerto TCP en el que vas a escuchar.
* Escanea la carpeta `compartida/` para ver qu√© archivos va a ofrecer este nodo.
* Usa UDP broadcast para verificar si alguien m√°s ya tiene ese nombre (con `node_id.c`).
* Lanza:

  * Un **hilo** para la CLI (para escribir comandos como `id_nodo`, `salir`, etc).
  * El **servidor TCP** que acepta conexiones entrantes con `epoll`.

### 2. `node_id.c` ‚Äî Solicitud de ID v√≠a UDP Broadcast

Este m√≥dulo:

* Crea un **socket UDP broadcast** y manda un mensaje `NAME_REQUEST <NOMBRE>`.
* Espera 5 segundos para ver si alguien le responde con `INVALID_NAME`.
* Si no recibe nada, **asume que puede usar el nombre**.
* Si alguien responde, termina el programa y te pide que uses otro ID (en versiones futuras puede reintentar, pero ac√° solo aborta para simplificar).

Este paso es crucial para **garantizar que no haya dos nodos con el mismo nombre**.

### 3. `server.c` ‚Äî Servidor TCP con `epoll`

Este m√≥dulo:

* Abre un socket TCP en el puerto que se le pas√≥.
* Usa `epoll` (m√©todo eficiente para manejar muchas conexiones) para:

  * Esperar nuevas conexiones de clientes (otros nodos que quieren hablar con este).
  * Leer mensajes de esos clientes y mostrarlos por consola.

Nota: Por ahora no maneja comandos reales ni protocolos complejos. Solo imprime lo que recibe. Es como un esqueleto que despu√©s vamos a completar.

### 4. `cli.c` ‚Äî Interfaz de L√≠nea de Comandos (CLI)

Este m√≥dulo:

* Lanza un **hilo interactivo** que te permite escribir comandos por teclado.
* Comandos soportados:

  * `id_nodo`: imprime tu ID.
  * `listar_mis_archivos`: lista los archivos de la carpeta `compartida/`.
  * `salir`: termina el programa.

### 5. `files.c` ‚Äî M√≥dulo para manejar archivos compartidos

Este m√≥dulo:

* Al iniciar, escanea la carpeta `./compartida/` y guarda los nombres de los archivos.
* En este ejemplo solo muestra los archivos por consola, pero m√°s adelante va a servir para compartirlos por red.

---

## üîÑ ¬øQu√© pasa cuando ejecut√°s el programa?

1. Lo corr√©s as√≠:

```bash
./nodo NOMBRE_ID 12345
```

2. El nodo manda un **broadcast UDP** a toda la red preguntando si alguien ya est√° usando `NOMBRE_ID`.

3. Si no recibe una respuesta en 5 segundos, lo adopta y lo muestra:

```
Nombre 'nodoA' adoptado correctamente.
```

4. Luego:

   * Escanea los archivos que vas a compartir.
   * Abre el puerto TCP `12345` para aceptar conexiones de otros nodos.
   * Te deja escribir comandos desde la terminal.

---

## üó£Ô∏è ¬øC√≥mo lo pod√©s explicar vos?

Pod√©s decir algo como:

> "Lo que hicimos en la Parte 1 fue crear la estructura base de un nodo en una red P2P. Al arrancar, el nodo intenta registrar su nombre en la red usando broadcast UDP. Si nadie responde con `INVALID_NAME`, lo toma como propio. Despu√©s, abre un servidor TCP que usa `epoll` para aceptar m√∫ltiples conexiones a la vez, y corre una l√≠nea de comandos para interactuar con el nodo. Adem√°s, escanea la carpeta compartida al inicio para ver qu√© archivos ofrece."

---

¬øQuer√©s que te escriba una versi√≥n a√∫n m√°s resumida o m√°s formal para usar en la clase? ¬øO que te arme un gui√≥n como para presentar ante la profe?
